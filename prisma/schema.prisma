// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  MANAGER
}

enum BookType {
  PHYSICAL
  DIGITAL
}

model User {
  id          String     @id @default(uuid())
  email       String     @unique
  password    String
  firstName   String
  lastName    String
  role        Role       @default(CLIENT)
  sessions    Session[]
  refreshTokens RefreshToken[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  Order Order[]

  CartItem CartItem[]

  Like Like[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Book {
  id          String       @id @default(uuid())
  title       String
  author      String
  description String
  price       Float
  stock       Int?
  fileUrl     String?
  type        BookType
  images      BookImage[]
  likes       Like[]
  cartItems   CartItem[]
  orders      OrderItem[]
  categories  Category[]
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

model BookImage {
  id        String   @id @default(uuid())
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  imageUrl  String
  isPrimary Boolean  @default(false)

  @@index([bookId])
  @@index([bookId, isPrimary])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([name])
}
model Like {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, bookId])
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())

  @@unique([userId, bookId])
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  total     Float
  createdAt DateTime    @default(now())
  status    String
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
}
